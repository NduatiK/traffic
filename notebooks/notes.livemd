# Traffic

## Road

```elixir
defmodule R do
  def recompile() do
    Mix.Task.reenable("app.start")
    Mix.Task.reenable("compile")
    Mix.Task.reenable("compile.all")
    compilers = Mix.compilers()
    Enum.each(compilers, &Mix.Task.reenable("compile.#{&1}"))
    Mix.Task.run("compile.all")
  end
end
```

```elixir
R.recompile()
```

```elixir
alias Traffic.Network.Road
alias Traffic.Network.Junction
alias Traffic.Vehicles.Vehicle
```

```elixir
road = Road.preloaded()
# IO.inspect(road)
# IO.inspect(road |> Road.step([]) |> Road.step([]))
```

```elixir
import IEx.Helpers

h(clear)
```

```elixir
import IEx.Helpers
```

```elixir
R.recompile()
1
```

```elixir
road_a = Road.preloaded(:a)
road_b = Road.preloaded(:b)

junction = %Junction{
  roads: %{
    a: %{road: road_a, connection: :right, light: :red},
    b: %{road: road_b, connection: :left, light: :red}
  }
}
```

```elixir
R.recompile()
junction
```

```elixir

```

```elixir
R.recompile()

junction =
  0..30
  |> Enum.reduce(junction, fn i, junction ->
    junction = Junction.step(junction)

    clear()
    :timer.sleep(200)
    IO.inspect(i)
    IO.inspect(junction)
    clear()

    if i > 15 do
      %{
        junction
        | roads:
            junction.roads
            |> Enum.map(fn {name, road} ->
              {name, Map.put(road, :light, :green)}
            end)
            |> Enum.into(%{})
      }
    else
      junction
    end
  end)
```

```elixir
junction
```

```elixir
R.recompile()
# IO.inspect(junction)
junction
junction = Junction.step(junction)
```
