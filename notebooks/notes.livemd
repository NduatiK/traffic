# Traffic

## Road

```elixir
defmodule R do
  def recompile() do
    Mix.Task.reenable("app.start")
    Mix.Task.reenable("compile")
    Mix.Task.reenable("compile.all")
    compilers = Mix.compilers()
    Enum.each(compilers, &Mix.Task.reenable("compile.#{&1}"))
    Mix.Task.run("compile.all")
  end
end
```

```elixir
R.recompile()
```

```elixir
alias Traffic.Network.Road
alias Traffic.Network.Junction
alias Traffic.Vehicles.Vehicle
```

```elixir
road = Road.preloaded()
```

```elixir
import IEx.Helpers

h(clear)
```

```elixir
import IEx.Helpers
```

```elixir
R.recompile()
0
```

```elixir
road1 = Road.preloaded("left")
road2 = Road.preloaded("right")

junction = %Junction{
  left_light: :red,
  right_light: :green,
  left_road: road1,
  right_road: road2
}
```

```elixir
0..20
|> Enum.reduce(junction, fn _, junction ->
  junction = Junction.step(junction)

  clear()
  :timer.sleep(1000)
  IO.inspect(junction)
  clear()

  junction
end)
```

```elixir
R.recompile()
0
```
