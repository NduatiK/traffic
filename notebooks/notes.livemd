# Traffic

## Setup

```elixir
defmodule R do
  def recompile() do
    Mix.Task.reenable("app.start")
    Mix.Task.reenable("compile")
    Mix.Task.reenable("compile.all")
    compilers = Mix.compilers()
    Enum.each(compilers, &Mix.Task.reenable("compile.#{&1}"))
    Mix.Task.run("compile.all")
  end
end
```

```elixir
R.recompile()
:ok
```

```elixir
alias Traffic.Network.Road
alias Traffic.Network.Junction
alias Traffic.Vehicles.Vehicle
import IEx.Helpers
```

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

## Traffic Signal Optimization on Time Dependent Traffic Simulation Data

### Components

* Vehicles
* Roads
* Junctions
* Road Networks
* Signal Timing

<!-- livebook:{"break_markdown":true} -->

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

## Vehicle Modelling 🚗

We define a vehicle based only on its length and the profile of the driver.

Our research shows that there are 5 main driver profiles:

| Profile                | Description                                                                                                                                                  |
| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| **Hunters/Tailgaters** | Drivers who tend to stay as close as possible to the leading vehicle and rush forward. Typically young males and females.                                    |
| **Planners**           | Drivers who drive fast but maintain a safe distance from lead vehicles. Likely to be male (primarily young)                                                  |
| **Flow Conformists**   | Drivers who conform to the patterns vehicles around them. This is an average driver, and is most likely middle-aged.                                         |
| **Extremists**         | Drivers who present an unpredictable driving patterns driving both aggressively and passively. These drivers are evenly distributed across demographics.     |
| **Ultraconservative**  | Drivers who maintain a big distance with the leading vehicle. These drivers have gentler acceleration curves and slower speeds. Likely to be old and female. |

These can be modelled using:

* Acceleration
* Top speed
* Distance from lead vehicle
* A predictability score

```elixir
Vehicle.random()
```

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

## Roads 🛣

A road

* keeps track of the vehicles driving on it
* responds to ticks to update the vehicles based on their speed.

### Properties

| Property | Description                                                              |
| -------- | ------------------------------------------------------------------------ |
| Length   | Distance between the two endts of a road                                 |
| Lanes    | A road has (possibly empty) arrays of left headed and right headed lanes |
|          | Each lane keeps track of the vehicles on it to prevent collisions.       |
|          | Vehicles see the world through the lane                                  |

```elixir
road = Road.preloaded()
# Map.from_struct(road)
```

```elixir
R.recompile()

road
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> Road.step([])
|> then(& &1.road)
```

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

## Junctions 🚦

A junction

* connects to multiple roads
* controls vehicle movement into the junction based on lights or emptiness
* contains vehicles crossing the junction
* transfers vehicles to other roads

```elixir
road_a = Road.preloaded(:a)
road_b = Road.preloaded(:b)

junction = %Junction{
  roads: %{
    a: %{road: road_a, connection: :right, light: :red},
    b: %{road: road_b, connection: :left, light: :red}
  }
}

Map.from_struct(junction)
|> put_in([:roads, :a, :road], "...")
|> put_in([:roads, :b, :road], "...")
```

```elixir
junction
```

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

## Simulation Demo

```elixir
R.recompile()

Traffic.Network.Road.set_scale_speed(1)

junction =
  0..50
  |> Enum.reduce(junction, fn i, junction ->
    {junction, _} = Junction.step(junction)

    :timer.sleep(400)
    IO.inspect(junction)

    if i > 20 do
      %{
        junction
        | roads:
            junction.roads
            |> Enum.map(fn
              {:a = name, road} when i > 20 ->
                {name, Map.put(road, :light, :green)}

              {:a = name, road} when i > 40 ->
                {name, Map.put(road, :light, :red)}

              {:b = name, road} when i > 30 ->
                {name, Map.put(road, :light, :green)}

              road ->
                road
            end)
            |> Enum.into(%{})
      }
    else
      junction
    end
  end)
```

```elixir
junction
```

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<p>
<span style="text-align:center">&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp↓</span>
</p>

<br />

<br />

<br />

<br />

<br />

<br />

<br />

<br />

## ⛓🥨❄🔱➰ Graphs

## Section

The graph sends out a pulse to each road which in turn sends out a pulse to all the __*

lanes*__ feeding into it.

The pulse is received by the lanes to prevent "double spending" on the pulse.

This also allows the junction to let its roads know its current light.

```elixir
alias Graph
alias Traffic.Network.Graph, as: RoadGraph

graph = Traffic.Network.build_network()
```

```elixir
R.recompile()
[j1, j2] = RoadGraph.junctions(graph)
{RoadGraph.roads(graph, j1), j1}

# Graph.edges()
```

```elixir
# RoadGraph.junctions(graph)

defmodule GraphPlay do
  def step(graph) do
    # Update road
    graph
    |> RoadGraph.junctions()
    |> Enum.map(fn junction ->
      Agent.get_and_update(junction, fn junction ->
        # roads = RoadGraph.roads(graph, junction)
        # |> Enum.map()

        # junction
        # |> Junction.step()

        # new_road = Road.step(road, [])
        # {new_road, new_road}
        {junction, junction}
      end)
    end)
  end
end
```

## Roadmap

* [x] Model one speed car
* [x] Model roads with lanes
* [x] Model two road junction
* [x] Implement simple junction and road movement on tick
* [ ] Complete implementing driver profiles and use them for new vehicles
* [ ] Implement network of roads and junctions
* [ ] Add lane switching
* [ ] Complete random vehicle generation and removal based on road usage patterns
* [ ] Add route planning based on A-star to provide random start and end points for cars
* [ ] Add signal optimization
* [ ] Visualize road network in browser (SVG)

---

Work on report alongside this

```elixir
width = 200
height = 200

#  """
#  <%= for node <- @nodes do %>
#    <rect x={node.x} y={node.y} rx="10" ry="10" width={node.width} height={node.height}
#    class="node" phx-click="show_info" phx-value-info={node_encoded_pid(node.value)} phx-page-loading />
#    <text class="tree-node-text" x={node.x + 10} y={node.y + div(node.height, 2)} dominant-baseline="central">
#      <%= node.label %>
#    </text>
#  <% end %>
#  <%= for line <- @lines do %>
#    <line x1={line.x1} y1={line.y1} x2={line.x2} y2={line.y2} class="line" />
#  <% end %>
#  """ <>
("""
 <svg width=#{width} height=#{height} id="tree" class="tree">
 """ <>
   "</svg>")
|> IO.inspect()
|> Kino.Image.new(:svg)
|> IO.inspect()
```

```elixir
{:ok, resp} =
  :httpc.request(:get, {'https://en.wikipedia.org/wiki/File:SVG_Logo.svg', []}, [],
    body_format: :binary
  )

{{_, 200, 'OK'}, _headers, body} = resp
Kino.Image.new(body, :svg)
```
